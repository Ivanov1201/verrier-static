{"version":3,"sources":["app/modules/trees/singleWalletTrees.js","app/pages/trees.js"],"names":["SingleWalletTrees","props","state","treeTableConfig","startingPage","rowCount","initialPageSize","tableHeaders","id","classNames","style","width","value","cell","render","className","moment","fromNow","format","row","planter","attached_name","address","launchpad","name","airdrop","Button","variant","disabled","parseInt","current_tree_count","onClick","plantTree","data","this","refreshTreeList","getAllTreesOfASingleWallet","limit","offset","TreesRequests","getOneWalletTrees","wallet","then","response","setState","Promise","resolve","pagination","pageSize","page","treeId","plantASingleTree","showModal","header","body","treeCount","catch","err","console","log","message","reject","tableConfig","headers","onPaginationChanges","trees","React","Component","connect","globalModal","visibleModal","getVisibleModal","alerts","closeModal","closeAlert","showAlert","TreePage","globalVars","key","Row","unplanted_trees","verificationModal","openSingleTreesModal","getAllTrees","plantATreeByWalletAddress","urls","length","globalModalStyle","maxWidth","minWidth","margin","fade","Tabs","activeKey","onSelect","Tab","eventKey","title","GVars"],"mappings":"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","file":"static/js/11.2ca45879.chunk.js","sourcesContent":["import React from \"react\";\nimport * as moment from \"moment\";\nimport {Button} from \"react-bootstrap\";\nimport {TreesRequests} from \"../../services/Requests\";\nimport Table from \"../common/table\";\nimport {getVisibleModal} from \"../../../redux/reducer/alertsReducer\";\nimport {connect} from \"react-redux\";\nimport {closeAlert, showAlert} from \"../../../redux/actions/alertActions\";\nimport ShortFormAddress from \"../common/shortFormAddress\";\n\n\n\n\nclass SingleWalletTrees extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state={\n            treeTableConfig: {},\n            startingPage: 1,\n            rowCount: null,\n            initialPageSize: 10,\n            tableHeaders: [\n                {\n                    id:\"current_tree_count\",\n                    classNames: \"\",\n                    style:{\n                        width:80\n                    },\n                    value : \"Trees to be planted\",\n                },\n                {\n                    id:\"createdAt\",\n                    classNames: \"\",\n                    style:{\n                        width:80\n                    },\n                    value : \"Commission date\",\n                    cell: {\n                        render: (value)=>{\n                            return <div className={\"d-flex flex-column\"}>\n                                <div className={\"my-1\"}>{moment(value).fromNow()}</div>\n                                <div className={\"my-1\"}>{moment(value).format('YYYY-DD-MM HH:mm')}</div>\n                            </div>\n                        }\n                    }\n                },\n                {\n                    id:\"createdAt\",\n                    classNames: \"\",\n                    style:{\n                        width:80\n                    },\n                    value : \"Commissioned By\",\n                    cell: {\n                        render: (value, row)=>{\n                            return row?.planter ? <div className={\"d-flex flex-column\"}>\n                                <div className={\"my-1\"}>{row?.planter?.attached_name ?? 'Unnamed'}</div>\n                                <div className={\"my-1\"}><ShortFormAddress address={row?.planter?.address}/></div>\n                            </div> : row?.launchpad ? row?.launchpad?.name : row?.airdrop ? row?.airdrop?.name : 'Verrier Swap'\n                        }\n                    }\n                },\n                {\n                    id:\"last_plantation\",\n                    classNames: \"\",\n                    style:{\n                        width:80\n                    },\n                    value: \"Last Plantation\",\n                    cell:{\n                        render: (value)=>{\n                            return value ? moment(value).fromNow() : 'No plantations yet'\n                        }\n                    }\n                },\n                {\n                    id:\"actions\",\n                    classNames: \"\",\n                    style:{\n                        width:50\n                    },\n                    value: \"Actions\",\n                    cell:{\n                        render: (value, row)=>{\n                            return <Button variant=\"primary\" disabled={parseInt(row?.current_tree_count, 10) === 0} onClick={()=>this.plantTree(row?.id)}><i className={\"fa fa-tree\"}/> Plant</Button>\n                        }\n                    }\n                },\n            ],\n            data: [],\n        }\n    }\n\n\n    componentDidMount() {\n        this.refreshTreeList();\n    }\n\n    refreshTreeList(){\n        return this.getAllTreesOfASingleWallet({limit:this.state.initialPageSize, offset:(this.state.startingPage - 1) * this.state.initialPageSize})\n    }\n\n\n    getAllTreesOfASingleWallet({limit, offset}){\n        let TR = new TreesRequests();\n        return TR.getOneWalletTrees(this.props.wallet, {limit, offset}).then((response)=>{\n            this.setState({\n                data: response.data.data,\n                rowCount: response.data.rowCount\n            });\n            return Promise.resolve(true);\n        });\n    }\n\n    onPaginationChanges(pagination){\n        this.getAllTreesOfASingleWallet({\n            limit: pagination.pageSize,\n            offset: pagination.pageSize * (pagination.page - 1)\n        })\n    }\n\n    plantTree(treeId){\n        let TR = new TreesRequests();\n        return TR.plantASingleTree(treeId).then((response)=>{\n            this.props.showModal({header: \"Operation success\", body: <div>{`${response.data.treeCount ?? 0}Trees has been planted`}</div>})\n            this.refreshTreeList();\n            return Promise.resolve(true);\n        }).catch((err)=>{\n            console.log(err);\n            this.props.showModal({\n                header: \"Operation Failed\",\n                body: <div>Please refresh the page and try again : <p>{err.message}</p></div>\n            })\n            return Promise.reject(err);\n        });\n    }\n\n\n    render() {\n        const {tableHeaders, data, rowCount} = this.state;\n\n        return (\n            <div>\n                <Table\n                    tableConfig={\n                        {\n                            headers: tableHeaders,\n\n                            initialPageSize: 10,\n                            startingPage: 1\n                        }\n                    }\n                    rowCount={rowCount}\n                    onPaginationChanges={(data)=>this.onPaginationChanges(data)}\n                    data={data[0]?.trees}\n                />\n            </div>\n        );\n    }\n}\n\n\nconst mapRouterStateToProps = state => ({\n    globalModal: state.globalModal,\n    visibleModal: getVisibleModal(state.alerts),\n});\n\n\n\nexport default connect(\n    mapRouterStateToProps,\n    {closeModal: closeAlert, showModal: showAlert}\n)(SingleWalletTrees);\n","import React from 'react';\nimport {getVisibleModal} from \"../../redux/reducer/alertsReducer\";\nimport {connect} from \"react-redux\";\nimport {closeAlert, showAlert} from \"../../redux/actions/alertActions\";\nimport {Button, Row, Tab, Tabs} from \"react-bootstrap\";\nimport * as moment from \"moment\";\nimport {verificationModal} from \"../modules/Utils/utilModals\";\nimport Table from \"../modules/common/table\";\nimport ShortFormAddress from \"../modules/common/shortFormAddress\";\nimport {TreesRequests} from \"../services/Requests\";\nimport SingleWalletTrees from \"../modules/trees/singleWalletTrees\";\n\nclass TreePage extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state ={\n            globalVars: null,\n            startingPage: 1,\n            key:\"trees\",\n            initialPageSize: 10,\n            rowCount: null,\n            tableHeaders: [\n                {\n                    id:\"wallet\",\n                    classNames: \"\",\n                    style:{\n                        width:80\n                    },\n                    value : \"Wallet\",\n                    cell:{\n                        render:(value)=>{\n                            return <ShortFormAddress address={value}/>\n                        }\n                    }\n                },\n                {\n                    id:\"unplanted_trees\",\n                    classNames: \"\",\n                    style:{\n                        width:80\n                    },\n                    value: \"UnPlanted trees\",\n                },\n                {\n                    id:\"planted_trees\",\n                    classNames: \"\",\n                    style:{\n                        width:80\n                    },\n                    value: \"Planted Trees\",\n                },\n                {\n                    id:\"last_plantation\",\n                    classNames: \"\",\n                    style:{\n                        width:80\n                    },\n                    value: \"Last Plantation\",\n                    cell:{\n                        render: (value)=>{\n                            return value ? moment(value).fromNow() : 'No plantations yet'\n                        }\n                    }\n                },\n                {\n                    id:\"actions\",\n                    classNames: \"\",\n                    style:{\n                        width:50\n                    },\n                    value: \"Actions\",\n                    cell:{\n                        render: (value, row)=>{\n                            return <Row>\n                                <Button className={\"m-1\"} variant=\"primary\" disabled={parseInt(row?.unplanted_trees, 10) === 0} onClick={()=>verificationModal(()=>this.plantTree(row?.wallet), {body:`You are about plant all ${row?.unplanted_trees} trees for this wallet`})}><i className={\"fa fa-tree\"}/> Plant</Button>\n                                <Button className={\"m-1\"} variant=\"primary\" onClick={()=>this.openSingleTreesModal(row?.wallet)}><i className={\"fa fa-list\"}/> List</Button>\n                            </Row>\n                        }\n                    }\n                },\n            ]\n        }\n    }\n\n    componentDidMount() {\n        this.refreshTreeList();\n    }\n\n\n    refreshTreeList(){\n        return this.getAllTrees({limit:this.state.initialPageSize, offset:(this.state.startingPage - 1) * this.state.initialPageSize})\n    }\n\n\n    getAllTrees({limit, offset}){\n        let TR = new TreesRequests();\n        return TR.getAllTrees({limit, offset}).then((response)=>{\n            this.setState({\n                data: response.data.data,\n                rowCount: response.data.rowCount\n            });\n            return Promise.resolve(true);\n        });\n    }\n\n    plantTree(wallet){\n        let TR = new TreesRequests();\n        return TR.plantATreeByWalletAddress(wallet).then((response)=>{\n            this.props.showModal({header: \"Operation success\", body: <div>{`${response.data.urls?.length ?? 0}Trees has been planted`}</div>})\n            this.refreshTreeList();\n            return Promise.resolve(true);\n        }).catch((err)=>{\n            console.log(err);\n            this.props.showModal({\n                header: \"Operation Failed\",\n                body: <div>Please refresh the page and try again : <p>{err.message}</p></div>\n            })\n            return Promise.reject(err);\n        });\n    }\n\n\n    openSingleTreesModal(wallet){\n        this.props.showModal({\n            header: `Showing all trees of ${wallet}`,\n            body: <SingleWalletTrees wallet={wallet} />,\n            globalModalStyle: {\n                width: \"50vw\",\n                maxWidth: \"60vw\",\n                minWidth: \"300px\",\n                margin: \"auto\"\n            },\n            fade: true\n        })\n    }\n\n    onPaginationChanges(pagination){\n        console.log(pagination);\n        this.getAllTrees({\n            limit: pagination.pageSize,\n            offset: pagination.pageSize * (pagination.page - 1)\n        })\n    }\n\n\n    render() {\n        const {tableHeaders, data, rowCount} = this.state;\n        return <div className={\"p-1\"}>\n            <div className={`card card-custom `}>\n                {/* begin::Header */}\n                <div className=\"card-header border-0 py-5\">\n                    <h3 className=\"card-title align-items-start flex-column\">\n                              <span className=\"card-label font-weight-bolder text-dark\">\n                               Tree List\n                              </span>\n                        <span className=\"text-muted mt-3 font-weight-bold font-size-sm\">\n                            A management page for the trees and tree planting\n                          </span>\n                    </h3>\n\n                </div>\n                {/* end::Header */}\n\n                {/* begin::Body */}\n                <div className=\"card-body py-0\">\n                    <Tabs\n                        id=\"controlled-tab-example\"\n                        activeKey={this.state.key}\n                        onSelect={key => this.setState({key})}\n                    >\n                        <Tab eventKey=\"trees\" title=\"Trees List\">\n                            <Table\n                                tableConfig={\n                                    {\n                                        headers: tableHeaders,\n                                        initialPageSize: 10,\n                                        startingPage: 1,\n                                    }\n                                }\n                                rowCount={rowCount}\n                                onPaginationChanges={(data)=>this.onPaginationChanges(data)}\n                                data={data}\n                            />\n                        </Tab>\n                    </Tabs>\n                </div>\n                <div className=\"card-footer d-flex\">\n\n                </div>\n                {/* end::Body */}\n            </div>\n\n        </div>\n    }\n\n}\n\n\nconst mapRouterStateToProps = state => ({\n    globalModal: state?.globalModal,\n    visibleModal: getVisibleModal(state?.alerts),\n});\n\nlet GVars = connect(\n    mapRouterStateToProps,\n    {closeModal: closeAlert, showModal: showAlert}\n)(TreePage);\n\nexport default GVars\n"],"sourceRoot":""}